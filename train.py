import torch.cuda

from ultralytics import YOLO

# TODO:
#  BASE MODEL:
#       1. Запустить модель yolov10n на Каждом из датасетов с определенными настройками как в статьях.
#  SFS-CNet:
#       3. Запустить модель на Каждом из датасетов с определенными настройками как в статьях.
#  YOLOX +:
#       3. Запустить модель на Каждом из датасетов с определенными настройками как в статьях.
#  CCDN:
def main():
    device = 0 if torch.cuda.is_available() else 'cpu'
    # model = YOLO('ultralytics/cfg/models/12/yolo12.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.
    #
    # model.train(
    #     data='datasets/SAR_AirCraft-1.0/sar_aircraft-1.0.yaml',
    #     epochs=50,
    #     imgsz=640,
    #     batch=16,
    #     device=device,  # Укажите GPU, если доступен
    #     patience=20,    # Количество эпох без улучшений для остановки обучения
    #     pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
    #     optimizer='SGD',
    #     lr0=0.01,   # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
    #     lrf=0.01,   # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
    #     seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов
    #     momentum=0.937,
    #     weight_decay=0.0005, # L2 regularization term
    #
    #     # Настройка сохранения
    #     project='runs/training/SAR_AirCraft/augmented',  # Основная папка для экспериментов
    #     name='yolov12n_50epoch',  # Имя подпапки для конкретного запуска
    #     exist_ok=True,  # Продолжить обучение в существующей папке
    #     plots=True,  # Включить графики обучения
    #
    #     # Аугментации
    #     auto_augment=None,
    #     hsv_h=0.015,    # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
    #     hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
    #     hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
    #     degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
    #     translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
    #     scale=0.5,  # Масштабирует изображение
    #     fliplr=0.5, # Переворачивает изображение слева направо с заданной вероятностью
    #     mosaic=1.0, # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
    #     close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
    #     cutmix=0.0    # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
    # )

    # yolo12n
    model = YOLO('ultralytics/cfg/models/12/yolo12.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/SAR_AirCraft-1.0/sar_aircraft-1.0.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.937,
        weight_decay=0.0004,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.85,
        box=7.0,
        cls=0.5,

        # Настройка сохранения
        project='runs/training/SAR_AirCraft/augmented',  # Основная папка для экспериментов
        name='yolov12n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/12/yolo12.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/Official-SSDD-OPEN/ssdd.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.96,
        weight_decay=0.0004,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.85,
        box=7.0,
        cls=0.5,

        # Настройка сохранения
        project='runs/training/SSDD/augmented',  # Основная папка для экспериментов
        name='yolov12n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/12/yolo12.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/HRSID/hrsid.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.00992,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.00977,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.95347,
        weight_decay=0.0005,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.72976,
        box=6.81693,
        cls=0.53727,

        # Настройка сохранения
        project='runs/training/HRSID/augmented',  # Основная папка для экспериментов
        name='yolov12n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    # yolo11n
    model = YOLO('ultralytics/cfg/models/11/yolo11.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/SAR_AirCraft-1.0/sar_aircraft-1.0.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        # iou=0.5,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01007,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01001,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.97961,
        weight_decay=0.00063,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.77627,
        box=6.51375,
        cls=0.49507,

        # Настройка сохранения
        project='runs/training/SAR_AirCraft/augmented',  # Основная папка для экспериментов
        name='yolov11n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/11/yolo11.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/Official-SSDD-OPEN/ssdd.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01007,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01001,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.97961,
        weight_decay=0.00063,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.77627,
        box=6.51375,
        cls=0.49507,

        # Настройка сохранения
        project='runs/training/SSDD/augmented',  # Основная папка для экспериментов
        name='yolov11n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/11/yolo11.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/HRSID/hrsid.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01007,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01001,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.97961,
        weight_decay=0.00063,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.77627,
        box=6.51375,
        cls=0.49507,


        # Настройка сохранения
        project='runs/training/HRSID/augmented',  # Основная папка для экспериментов
        name='yolov11n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    # yolo10n
    model = YOLO('ultralytics/cfg/models/v10/yolov10n.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/SAR_AirCraft-1.0/sar_aircraft-1.0.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01076,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.00051,
        weight_decay=0.0004,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.82412,
        box=7.13687,
        cls=0.49683,

        # Настройка сохранения
        project='runs/training/SAR_AirCraft/augmented',  # Основная папка для экспериментов
        name='yolov10n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/v10/yolov10n.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/Official-SSDD-OPEN/ssdd.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01076,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.00051,
        weight_decay=0.0004,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.82412,
        box=7.13687,
        cls=0.49683,

        # Настройка сохранения
        project='runs/training/SSDD/augmented',  # Основная папка для экспериментов
        name='yolov10n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/v10/yolov10n.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/HRSID/hrsid.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01076,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.01,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.00051,
        weight_decay=0.0004,   # L2 regularization term
        warmup_epochs=3,
        warmup_momentum=0.82412,
        box=7.13687,
        cls=0.49683,

        # Настройка сохранения
        project='runs/training/HRSID/augmented',  # Основная папка для экспериментов
        name='yolov10n_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )



    model = YOLO('ultralytics/cfg/models/SFS-CNet/sfs_cnet.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/SAR_AirCraft-1.0/sar_aircraft-1.0.yaml',
        epochs=50,
        imgsz=640,
        batch=8,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01087,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.00925,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.98,
        weight_decay=0.00044,   # L2 regularization term
        warmup_epochs=4,
        warmup_momentum=0.8,
        box=7.0353,
        cls=0.57779,

        # Настройка сохранения
        project='runs/training/SAR_AirCraft/augmented',  # Основная папка для экспериментов
        name='sfs_cnet_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/SFS-CNet/sfs_cnet.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/Official-SSDD-OPEN/ssdd.yaml',
        epochs=50,
        imgsz=640,
        batch=8,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01087,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.00925,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.98,
        weight_decay=0.00044,   # L2 regularization term
        warmup_epochs=4,
        warmup_momentum=0.8,
        box=7.0353,
        cls=0.57779,


        # Настройка сохранения
        project='runs/training/SSDD/augmented',  # Основная папка для экспериментов
        name='sfs_cnet_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )

    model = YOLO('ultralytics/cfg/models/SFS-CNet/sfs_cnet.yaml', task='detect')  # или 'yolov10s.pt', 'yolov10m.pt' и т.д.

    model.train(
        data='datasets/HRSID/hrsid.yaml',
        epochs=50,
        imgsz=640,
        batch=8,
        device=device,  # Укажите GPU, если доступен
        patience=100,    # Количество эпох без улучшений для остановки обучения
        pretrained=False,   # Определяет, следует ли начинать обучение с предварительно подготовленной модели
        optimizer='SGD',
        seed=0, # Устанавливает случайное начальное значение для обучения, обеспечивая воспроизводимость результатов

        # Гиперпараметры
        lr0=0.01087,    # Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3)
        lrf=0.00925,    # Конечная скорость обучения как часть начальной скорости = (lr0 * lrf)
        momentum=0.98,
        weight_decay=0.00044,   # L2 regularization term
        warmup_epochs=4,
        warmup_momentum=0.8,
        box=7.0353,
        cls=0.57779,

        # Настройка сохранения
        project='runs/training/HRSID/augmented',  # Основная папка для экспериментов
        name='sfs_cnet_Le_SIoU_50epoch',  # Имя подпапки для конкретного запуска
        exist_ok=True,  # Продолжить обучение в существующей папке
        plots=True,  # Включить графики обучения

        # Аугментации
        auto_augment=None,
        hsv_h=0.015,
        # Позволяет регулировать оттенок изображения на малую долю цветового круга, внося разнообразие в цветовую гамму.
        hsv_s=0.5,  # Немного изменяет насыщенность изображения, влияя на интенсивность цветов.
        hsv_v=0.3,  # Изменяет значение (яркость) изображения на незначительную величину
        degrees=10,  # Произвольный поворот изображения в заданном диапазоне градусов
        translate=0.1,  # Преобразует изображение по горизонтали и вертикали на долю размера изображения???
        scale=0.5,  # Масштабирует изображение
        fliplr=0.5,  # Переворачивает изображение слева направо с заданной вероятностью
        mosaic=1.0,       # Объединяет четыре обучающих изображения в одно, имитируя различные композиции сцен и взаимодействие объектов.
        close_mosaic=10,  # Отключает аугментацию mosaic за 10 эпох до окончания обучения
        cutmix=0.0,  # Объединяет фрагменты двух изображений, создавая частичное смешение при сохранении четких областей.
        shear=0.0,
        perspective=0.0,
        flipud=0.0,
        mixup=0.0,
        copy_paste=0.0,
    )


if __name__ == '__main__':
    main()